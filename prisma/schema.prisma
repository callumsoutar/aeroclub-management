generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id              String            @id @default(cuid())
  name            String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  AircraftRates   AircraftRates[]
  Booking         Booking[]
  chargeables     Chargeable[]
  invoices        Invoice[]
  invoiceItems    InvoiceItem[]
  memberAccounts  MemberAccount[]
  payments        Payment[]
  transactions    Transaction[]
  users           User[]
  UserMemberships UserMemberships[]
}

model User {
  id                                  String            @id @default(cuid())
  email                               String            @unique
  name                                String?
  password                            String
  role                                UserRole          @default(MEMBER)
  organizationId                      String
  memberStatus                        MembershipStatus  @default(ACTIVE)
  createdAt                           DateTime          @default(now())
  updatedAt                           DateTime          @updatedAt
  address                             String?
  birthDate                           DateTime?
  gender                              String?
  isStaff                             Boolean?          @default(false)
  joinDate                            DateTime?
  lastFlight                          DateTime?
  memberNumber                        String?           @unique
  phone                               String?
  photo_url                           String?
  Booking_Booking_instructor_idToUser Booking[]         @relation("Booking_instructor_idToUser")
  Booking_Booking_user_idToUser       Booking[]         @relation("Booking_user_idToUser")
  invoices                            Invoice[]
  memberAccount                       MemberAccount?
  payments                            Payment[]
  transactions                        Transaction[]
  organization                        Organization      @relation(fields: [organizationId], references: [id])
  UserMemberships                     UserMemberships[]
  pilotDetails                        UserPilotDetails?

  @@index([organizationId])
  @@index([memberNumber])
}

model Booking {
  id                               String              @id @default(dbgenerated("(gen_random_uuid())::text"))
  aircraft_id                      String?
  instructor_id                    String?
  user_id                          String?
  type                             BookingType
  status                           BookingStatus?      @default(unconfirmed)
  description                      String?
  flight_type_id                   String?
  lesson_id                        String?
  booking_flight_times_id          String?
  booking_details_id               String?
  organization_id                  String
  created_at                       DateTime?           @default(now()) @db.Timestamptz(6)
  updated_at                       DateTime?           @default(now()) @db.Timestamptz(6)
  startTime                        DateTime?           @db.Timestamptz(6)
  endTime                          DateTime?           @db.Timestamptz(6)
  Aircraft                         Aircraft?           @relation(fields: [aircraft_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  BookingDetails                   BookingDetails?     @relation(fields: [booking_details_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  BookingFlightTimes               BookingFlightTimes? @relation(fields: [booking_flight_times_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  FlightTypes                      FlightTypes?        @relation(fields: [flight_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  User_Booking_instructor_idToUser User?               @relation("Booking_instructor_idToUser", fields: [instructor_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Lesson                           Lesson?             @relation(fields: [lesson_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Organization                     Organization        @relation(fields: [organization_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  User_Booking_user_idToUser       User?               @relation("Booking_user_idToUser", fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([aircraft_id], map: "idx_booking_aircraft")
  @@index([instructor_id], map: "idx_booking_instructor")
  @@index([organization_id], map: "idx_booking_organization")
  @@index([user_id], map: "idx_booking_user")
}

model Invoice {
  id               String        @id @default(cuid())
  dueDate          DateTime
  userId           String
  organizationId   String
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  invoiceNumber    String?       @unique
  issuedDate       DateTime      @default(now())
  notes            String?
  paidDate         DateTime?
  subtotal         Float
  tax              Float
  total            Float
  status           InvoiceStatus @default(DRAFT)
  reference        String?
  amountPaid       Decimal       @default(0.00) @db.Decimal(10, 2)
  balanceRemaining Decimal?      @default(dbgenerated("(total - (\"amountPaid\")::double precision)")) @db.Decimal(10, 2)
  organization     Organization  @relation(fields: [organizationId], references: [id])
  user             User          @relation(fields: [userId], references: [id])
  items            InvoiceItem[]
  payments         Payment[]

  @@index([organizationId])
  @@index([userId])
}

model InvoiceItem {
  id             String       @id @default(dbgenerated("gen_random_uuid()"))
  quantity       Int
  unitPrice      Float
  /// @db.comment("Tax rate as a decimal (e.g., 0.15 for 15%)")
  tax            Float        @default(0.15)
  total          Float
  description    String?
  invoiceId      String
  chargeableId   String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt
  organizationId String
  subTotal       Float?
  chargeable     Chargeable   @relation(fields: [chargeableId], references: [id])
  invoice        Invoice      @relation(fields: [invoiceId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id])

  @@index([invoiceId])
  @@index([chargeableId])
  @@index([organizationId])
}

model Chargeable {
  id               String         @id @default(cuid())
  name             String
  description      String?
  type             ChargeableType
  /// @db.comment("Price excluding tax")
  unitPrice        Float
  /// @db.comment("Tax rate as a decimal (e.g., 0.15 for 15%)")
  taxRate          Float          @default(0.15)
  isActive         Boolean        @default(true)
  organizationId   String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  /// @db.comment("Price including tax - this is what users input")
  unitPriceInclTax Float
  organization     Organization   @relation(fields: [organizationId], references: [id])
  invoiceItems     InvoiceItem[]

  @@index([organizationId])
}

model Payment {
  id             String        @id @default(cuid())
  amount         Float
  method         PaymentMethod
  reference      String?
  notes          String?
  status         PaymentStatus @default(PENDING)
  processedAt    DateTime?
  invoiceId      String?
  userId         String
  organizationId String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  invoice        Invoice?      @relation(fields: [invoiceId], references: [id])
  organization   Organization  @relation(fields: [organizationId], references: [id])
  user           User          @relation(fields: [userId], references: [id])
  transaction    Transaction?

  @@index([invoiceId])
  @@index([userId])
  @@index([organizationId])
}

model MemberAccount {
  id             String        @id @default(cuid())
  balance        Float         @default(0)
  userId         String        @unique
  organizationId String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  organization   Organization  @relation(fields: [organizationId], references: [id])
  user           User          @relation(fields: [userId], references: [id])
  transactions   Transaction[]

  @@index([organizationId])
}

model Transaction {
  id              String            @id @default(cuid())
  type            TransactionType
  amount          Float
  balanceAfter    Float
  description     String
  status          TransactionStatus @default(PENDING)
  memberAccountId String
  paymentId       String?           @unique
  userId          String
  organizationId  String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  receipt_number  String?           @unique @default(dbgenerated("('R-'::text || to_char(nextval('transaction_receipt_number_seq'::regclass), 'FM000000'::text))"))
  memberAccount   MemberAccount     @relation(fields: [memberAccountId], references: [id])
  organization    Organization      @relation(fields: [organizationId], references: [id])
  payment         Payment?          @relation(fields: [paymentId], references: [id])
  user            User              @relation(fields: [userId], references: [id])

  @@index([memberAccountId])
  @@index([userId])
  @@index([organizationId])
}

model member_number_sequences {
  organizationId String @id
  last_number    Int?   @default(0)
}

model UserPilotDetails {
  id              String       @id @default(cuid())
  userId          String       @unique
  caaClientNumber String?
  licenceType     LicenceType?
  typeRatings     String[]     @default([])
  class1Expiry    DateTime?
  class2Expiry    DateTime?
  dl9Expiry       DateTime?
  bfrExpiry       DateTime?
  endorsements    String[]     @default([])
  primeRatings    String[]     @default([])
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  user            User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model UserMemberships {
  id             String           @id @default(dbgenerated("(gen_random_uuid())::text"))
  user_id        String
  organizationId String
  membershipType MembershipType
  status         MembershipStatus
  startDate      DateTime         @default(now()) @db.Timestamptz(6)
  expiryDate     DateTime?        @db.Timestamptz(6)
  paid           Boolean          @default(false)
  discount       Decimal?         @default(0.00) @db.Decimal(10, 2)
  createdAt      DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime         @default(now()) @db.Timestamptz(6)
  Organization   Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  User           User             @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([startDate, expiryDate], map: "idx_user_memberships_dates")
  @@index([organizationId], map: "idx_user_memberships_organization")
  @@index([status], map: "idx_user_memberships_status")
  @@index([user_id], map: "idx_user_memberships_user_id")
}

model Aircraft {
  id              String            @id @default(dbgenerated("(gen_random_uuid())::text"))
  registration    String
  type_id         String?
  status          AircraftStatus?   @default(active)
  photo_url       String?
  record_hobbs    Boolean?          @default(false)
  record_tacho    Boolean?          @default(false)
  created_at      DateTime?         @default(now()) @db.Timestamptz(6)
  updated_at      DateTime?         @default(now()) @db.Timestamptz(6)
  AircraftTypes   AircraftTypes?    @relation(fields: [type_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  AircraftRates   AircraftRates[]
  AircraftTechLog AircraftTechLog[]
  Booking         Booking[]

  @@index([type_id], map: "idx_aircraft_type")
}

model AircraftTechLog {
  id            String    @id @default(dbgenerated("(gen_random_uuid())::text"))
  aircraft_id   String?
  current_tacho Decimal?  @db.Decimal
  current_hobbs Decimal?  @db.Decimal
  engine_hours  Decimal?  @db.Decimal
  created_at    DateTime? @default(now()) @db.Timestamptz(6)
  updated_at    DateTime? @default(now()) @db.Timestamptz(6)
  Aircraft      Aircraft? @relation(fields: [aircraft_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([aircraft_id], map: "idx_techlog_aircraft")
}

model AircraftTypes {
  id         String     @id @default(dbgenerated("(gen_random_uuid())::text"))
  type       String
  model      String
  year       String?
  created_at DateTime?  @default(now()) @db.Timestamptz(6)
  updated_at DateTime?  @default(now()) @db.Timestamptz(6)
  Aircraft   Aircraft[]
}

model BookingDetails {
  id                 String    @id @default(dbgenerated("(gen_random_uuid())::text"))
  route              String?
  eta                DateTime? @db.Time(6)
  comments           String?
  instructor_comment String?
  created_at         DateTime? @default(now()) @db.Timestamptz(6)
  updated_at         DateTime? @default(now()) @db.Timestamptz(6)
  passengers         String?
  Booking            Booking[]
}

model BookingFlightTimes {
  id          String    @id @default(dbgenerated("(gen_random_uuid())::text"))
  start_tacho Decimal?  @db.Decimal
  end_tacho   Decimal?  @db.Decimal
  start_hobbs Decimal?  @db.Decimal
  end_hobbs   Decimal?  @db.Decimal
  flight_time Decimal?  @db.Decimal
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  updated_at  DateTime? @default(now()) @db.Timestamptz(6)
  Booking     Booking[]
}

model FlightTypes {
  id            String          @id @default(dbgenerated("(gen_random_uuid())::text"))
  name          String
  description   String?
  created_at    DateTime?       @default(now()) @db.Timestamptz(6)
  updated_at    DateTime?       @default(now()) @db.Timestamptz(6)
  AircraftRates AircraftRates[]
  Booking       Booking[]
}

model Lesson {
  id          String    @id @default(dbgenerated("(gen_random_uuid())::text"))
  name        String
  description String?
  duration    Decimal?  @db.Decimal
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  updated_at  DateTime? @default(now()) @db.Timestamptz(6)
  Booking     Booking[]
}

model AircraftRates {
  id              String        @id(map: "aircraft_rates_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  aircraft_id     String?
  rate            Decimal       @db.Decimal(10, 2)
  flight_type_id  String?
  organization_id String?
  created_at      DateTime?     @default(now()) @db.Timestamptz(6)
  updated_at      DateTime?     @default(now()) @db.Timestamptz(6)
  Aircraft        Aircraft?     @relation(fields: [aircraft_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "aircraft_rates_aircraft_id_fkey")
  FlightTypes     FlightTypes?  @relation(fields: [flight_type_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "aircraft_rates_flight_type_id_fkey")
  Organization    Organization? @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "aircraft_rates_organization_id_fkey")

  @@index([aircraft_id], map: "idx_aircraft_rates_aircraft")
  @@index([flight_type_id], map: "idx_aircraft_rates_flight_type")
  @@index([organization_id], map: "idx_aircraft_rates_organization")
}

enum UserRole {
  OWNER
  ADMIN
  MEMBER
}

enum MembershipStatus {
  ACTIVE
  SUSPENDED
  EXPIRED
}

enum InvoiceStatus {
  DRAFT
  PENDING
  PAID
  OVERDUE
  CANCELLED
}

enum ChargeableType {
  MEMBERSHIP_FEE
  FLIGHT_HOUR
  LANDING_FEE
  INSTRUCTION
  EQUIPMENT
  OTHER
  AIRWAYS_FEE
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  BANK_TRANSFER
  VOUCHER
  ACCOUNT_CREDIT
  OTHER
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
  VOIDED
}

enum TransactionType {
  PAYMENT
  REFUND
  CREDIT
  DEBIT
  ADJUSTMENT
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  REVERSED
}

enum MembershipType {
  FULL
  STUDENT
  SOCIAL
  TEMPORARY
  HONORARY
  LIFE
}

enum LicenceType {
  PPL_A
  PPL_H
  CPL_A
  CPL_H
  ATP
}

enum AircraftStatus {
  active
  maintenance
  inactive
}

enum BookingStatus {
  unconfirmed
  confirmed
  flying
  inProgress
  complete
  cancelled
}

enum BookingType {
  groundwork
  flight
  maintenance
  timesheet
}
